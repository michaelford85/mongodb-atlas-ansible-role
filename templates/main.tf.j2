/* MULTI-CLOUD CLUSTER */

{% if not deploy_free_cluster %}

data "mongodbatlas_project" "my_project" {
  name = var.project_name
}

output "project_id" {
  value = data.mongodbatlas_project.my_project.id
}

# Create a Multi-Cloud MongoDB Atlas Cluster using mongodbatlas_advanced_cluster
resource "mongodbatlas_advanced_cluster" "multi_cloud_cluster" {
  project_id                  = data.mongodbatlas_project.my_project.id
  name                        = var.cluster_name
  cluster_type                = "REPLICASET"
  mongo_db_major_version      = var.mongo_db_major_version
  backup_enabled              = true
  disk_size_gb                = 64


  replication_specs {
    region_configs {
      electable_specs {
        instance_size = var.instance_size
        node_count    = 1
      } 
      auto_scaling{
        compute_enabled = true
        compute_min_instance_size = "M10"
        compute_max_instance_size = "M80"
      }
      provider_name = "AWS"
      priority      = 7
      region_name   = "US_EAST_2"
    }
    region_configs {
      electable_specs {
        instance_size = var.instance_size
        node_count    = 1
      }
      auto_scaling{
        compute_enabled = true
        compute_min_instance_size = "M10"
        compute_max_instance_size = "M80"
      }
      provider_name = "AWS"
      priority      = 6
      region_name   = "US_WEST_1"
    }
    region_configs {
      electable_specs {
        instance_size = var.instance_size
        node_count    = 1
      }
      auto_scaling{
        compute_enabled = true
        compute_min_instance_size = "M10"
        compute_max_instance_size = "M80"
      }
      provider_name = "AWS"
      priority      = 5
      region_name   = "US_WEST_2"
    }
    region_configs {
      read_only_specs {
        instance_size = var.instance_size
        node_count    = 1
      }
      auto_scaling{
        compute_enabled = true
        compute_min_instance_size = "M10"
        compute_max_instance_size = "M80"
      }
      provider_name = "AWS"
      priority      = 0
      region_name   = "EU_WEST_2"
    }
    region_configs {
      read_only_specs {
        instance_size = var.instance_size
        node_count    = 1
      }
      auto_scaling{
        compute_enabled = true
        compute_min_instance_size = "M10"
        compute_max_instance_size = "M80"
      }
      provider_name = "AWS"
      priority      = 0
      region_name   = "EU_WEST_1"
    }
  }
}
{% else %} /* DEPLOY FREE CLUSTER */

data "mongodbatlas_project" "my_project" {
  name = var.project_name
}

output "project_id" {
  value = data.mongodbatlas_project.my_project.id
}

# Create a Free MongoDB Atlas Cluster (M0 Tier)
resource "mongodbatlas_cluster" "free_tier_cluster" {
  project_id         = data.mongodbatlas_project.my_project.id
  name               = var.cluster_name
  provider_name      = "TENANT"
  backing_provider_name       = "AWS"
  cloud_backup       = false
  provider_instance_size_name = "M0"
  mongo_db_major_version = var.mongo_db_major_version
  provider_region_name = "US_EAST_1" # Change as needed for free-tier supported regions
}

{% endif %}

# Create a database admin user
resource "mongodbatlas_database_user" "db_admin" {
  username            = "${var.cluster_name}-admin"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "atlasAdmin"
    database_name = "admin"
  }
}

# Create a read-only user
resource "mongodbatlas_database_user" "read_only_user" {
  username            = "${var.cluster_name}-read-only"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "readAnyDatabase"
    database_name = "admin"
  }
}

# Create a read-write user
resource "mongodbatlas_database_user" "read_write_user" {
  username            = "${var.cluster_name}-read-write"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "readWriteAnyDatabase"
    database_name = "admin"
  }
}

# Get the external IP address of the machine running Terraform
data "http" "my_ip" {
  url = "https://checkip.amazonaws.com"
}

# Whitelist the IP of the local machine
resource "mongodbatlas_project_ip_access_list" "my_ip_whitelist" {
  project_id = data.mongodbatlas_project.my_project.id
  ip_address = chomp(data.http.my_ip.response_body)
  comment    = "Allow access from the machine running Terraform"
}

{% if deploy_free_cluster %}
output "mongodb_connection_string" {
  value = mongodbatlas_cluster.free_tier_cluster.connection_strings[0]
}
{% else %}
output "mongodb_connection_string" {
  value = mongodbatlas_advanced_cluster.multi_cloud_cluster.connection_strings[0]
}
{% endif %}






/* FREE CLUSTER */

/*
resource "mongodbatlas_project" "my_project" {
  name   = var.project_name
  org_id = var.org_id
  project_owner_id = var.project_owner_id
}

output "project_id" {
  value = data.mongodbatlas_project.my_project.id
}

# Create a Free MongoDB Atlas Cluster (M0 Tier)
resource "mongodbatlas_cluster" "free_tier_cluster" {
  project_id         = data.mongodbatlas_project.my_project.id
  name               = var.cluster_name
  provider_name      = "TENANT"
  backing_provider_name       = "AWS"
  cloud_backup       = false
  provider_instance_size_name = "M0"
  mongo_db_major_version = var.mongo_db_major_version
  provider_region_name = "US_EAST_1" # Change as needed for free-tier supported regions
}

# Create a database admin user
resource "mongodbatlas_database_user" "db_admin" {
  username            = "${var.cluster_name}-admin"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "atlasAdmin"
    database_name = "admin"
  }
}

# Create a read-only user
resource "mongodbatlas_database_user" "read_only_user" {
  username            = "${var.cluster_name}-read-only"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "readAnyDatabase"
    database_name = "admin"
  }
}

# Create a read-write user
resource "mongodbatlas_database_user" "read_write_user" {
  username            = "${var.cluster_name}-read-write"
  password            = var.db_password
  project_id          = data.mongodbatlas_project.my_project.id
  auth_database_name  = "admin"

  roles {
    role_name     = "readWriteAnyDatabase"
    database_name = "admin"
  }
}

# Get the external IP address of the machine running Terraform
data "http" "my_ip" {
  url = "https://checkip.amazonaws.com"
}

# Whitelist the IP of the local machine
resource "mongodbatlas_project_ip_access_list" "my_ip_whitelist" {
  project_id = data.mongodbatlas_project.my_project.id
  ip_address = chomp(data.http.my_ip.response_body)
  comment    = "Allow access from the machine running Terraform"
}

# Output MongoDB connection string
output "mongodb_connection_string" {
  value = mongodbatlas_cluster.free_tier_cluster.connection_strings[0]
}

*/